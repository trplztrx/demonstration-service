#version: '3.8'

services:
  backend:
    build:
      dockerfile: Dockerfile
      context: .
    image: goback
    container_name: app1
    depends_on:
      - postgres
      - migrate
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
        - dev

  postgres:
    container_name: postgres
    image: postgres:12.19-bullseye
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data"
    ports:
      - "5431:5432"
    volumes:
      - ./postgres/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - dev

  migrate:
    container_name: migrate
    build:
      dockerfile: Dockerfile
      context: ./infrastructure/db/migrations
    volumes:
      - ./infrastructure/db/migrations:/migrations
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: [
      "sh", "-c", 
      "goose -dir /migrations postgres \"host=postgres port=5432 user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} dbname=${POSTGRES_DB} sslmode=disable\" up"
    ]
    networks:
      - dev

volumes:
  postgres:
  migrations:

networks:
  dev:
    driver: bridge
